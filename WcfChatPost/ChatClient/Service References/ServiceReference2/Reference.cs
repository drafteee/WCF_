//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IChatService", CallbackContract=typeof(ChatClient.ServiceReference2.IChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientConnect", ReplyAction="http://tempuri.org/IChatService/ClientConnectResponse")]
        WcfChatPost.ChatUser ClientConnect(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientConnect", ReplyAction="http://tempuri.org/IChatService/ClientConnectResponse")]
        System.Threading.Tasks.Task<WcfChatPost.ChatUser> ClientConnectAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllUsers", ReplyAction="http://tempuri.org/IChatService/GetAllUsersResponse")]
        WcfChatPost.ChatUser[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllUsers", ReplyAction="http://tempuri.org/IChatService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<WcfChatPost.ChatUser[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendNewMessage")]
        void SendNewMessage(WcfChatPost.ChatMessage newMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendNewMessage")]
        System.Threading.Tasks.Task SendNewMessageAsync(WcfChatPost.ChatMessage newMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RemoveUser")]
        void RemoveUser(WcfChatPost.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RemoveUser")]
        System.Threading.Tasks.Task RemoveUserAsync(WcfChatPost.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateNewRoom", ReplyAction="http://tempuri.org/IChatService/CreateNewRoomResponse")]
        bool CreateNewRoom(WcfChatPost.ChatUser ourName, WcfChatPost.ChatUser name, WcfChatPost.ChatRoom nameRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateNewRoom", ReplyAction="http://tempuri.org/IChatService/CreateNewRoomResponse")]
        System.Threading.Tasks.Task<bool> CreateNewRoomAsync(WcfChatPost.ChatUser ourName, WcfChatPost.ChatUser name, WcfChatPost.ChatRoom nameRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetNewMessagess", ReplyAction="http://tempuri.org/IChatService/GetNewMessagessResponse")]
        WcfChatPost.ChatMessage[] GetNewMessagess(WcfChatPost.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetNewMessagess", ReplyAction="http://tempuri.org/IChatService/GetNewMessagessResponse")]
        System.Threading.Tasks.Task<WcfChatPost.ChatMessage[]> GetNewMessagessAsync(WcfChatPost.ChatUser user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ConfirmUser", ReplyAction="http://tempuri.org/IChatService/ConfirmUserResponse")]
        bool ConfirmUser(WcfChatPost.ChatUser ourName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateRoom", ReplyAction="http://tempuri.org/IChatService/CreateRoomResponse")]
        void CreateRoom(WcfChatPost.ChatUser ourName, WcfChatPost.ChatUser requiredName, WcfChatPost.ChatRoom nameRoom);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ChatClient.ServiceReference2.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<ChatClient.ServiceReference2.IChatService>, ChatClient.ServiceReference2.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WcfChatPost.ChatUser ClientConnect(string userName) {
            return base.Channel.ClientConnect(userName);
        }
        
        public System.Threading.Tasks.Task<WcfChatPost.ChatUser> ClientConnectAsync(string userName) {
            return base.Channel.ClientConnectAsync(userName);
        }
        
        public WcfChatPost.ChatUser[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<WcfChatPost.ChatUser[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public void SendNewMessage(WcfChatPost.ChatMessage newMessage) {
            base.Channel.SendNewMessage(newMessage);
        }
        
        public System.Threading.Tasks.Task SendNewMessageAsync(WcfChatPost.ChatMessage newMessage) {
            return base.Channel.SendNewMessageAsync(newMessage);
        }
        
        public void RemoveUser(WcfChatPost.ChatUser user) {
            base.Channel.RemoveUser(user);
        }
        
        public System.Threading.Tasks.Task RemoveUserAsync(WcfChatPost.ChatUser user) {
            return base.Channel.RemoveUserAsync(user);
        }
        
        public bool CreateNewRoom(WcfChatPost.ChatUser ourName, WcfChatPost.ChatUser name, WcfChatPost.ChatRoom nameRoom) {
            return base.Channel.CreateNewRoom(ourName, name, nameRoom);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewRoomAsync(WcfChatPost.ChatUser ourName, WcfChatPost.ChatUser name, WcfChatPost.ChatRoom nameRoom) {
            return base.Channel.CreateNewRoomAsync(ourName, name, nameRoom);
        }
        
        public WcfChatPost.ChatMessage[] GetNewMessagess(WcfChatPost.ChatUser user) {
            return base.Channel.GetNewMessagess(user);
        }
        
        public System.Threading.Tasks.Task<WcfChatPost.ChatMessage[]> GetNewMessagessAsync(WcfChatPost.ChatUser user) {
            return base.Channel.GetNewMessagessAsync(user);
        }
    }
}
